<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>리액트 on Home</title>
    <link>https://mycodingshub.github.io/tags/%EB%A6%AC%EC%95%A1%ED%8A%B8/</link>
    <description>Recent content in 리액트 on Home</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>Copyright (c) All Right Reserved.</copyright>
    <lastBuildDate>Tue, 02 Sep 2025 13:40:23 +0000</lastBuildDate>
    <atom:link href="https://mycodingshub.github.io/tags/%EB%A6%AC%EC%95%A1%ED%8A%B8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>리액트 동시성 기능 완전 정복 useTransition부터 useOptimistic까지</title>
      <link>https://mycodingshub.github.io/blog/2025-08-29-react-concurrent-features-deep-dive/</link>
      <pubDate>Tue, 02 Sep 2025 13:40:23 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2025-08-29-react-concurrent-features-deep-dive/</guid>
      <description>리액트의 핵심 동시성 기능인 useTransition, useDeferredValue, Suspense, useOptimistic을 소개합니다. 단순히 성능 최적화를 넘어, 복잡한 비동기 로직과 UI 업데이트를 어떻게 우아하게 조율하는지 실용적인 예제와 함께 알아봅니다.</description>
    </item>
    <item>
      <title>Context API의 리렌더링 지옥, Zustand가 구원해드립니다</title>
      <link>https://mycodingshub.github.io/blog/2025-08-22-zustand-vs-context-api-rerender-optimization/</link>
      <pubDate>Sat, 23 Aug 2025 10:17:02 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2025-08-22-zustand-vs-context-api-rerender-optimization/</guid>
      <description>리액트의 Context API를 사용하다 불필요한 리렌더링 문제로 골머리를 앓고 계신가요? Zustand가 어떻게 셀렉터 하나만으로 이 문제를 우아하게 해결하고, 코드까지 간결하게 만들어주는지 그 비법을 공개합니다.</description>
    </item>
    <item>
      <title>TanStack Query, 아직도 이렇게 쓰세요? (API 팩토리 패턴으로 boilerplate 박살내기)</title>
      <link>https://mycodingshub.github.io/blog/2025-08-22-tanstack-query-api-factory-pattern-for-less-boilerplate/</link>
      <pubDate>Sat, 23 Aug 2025 09:46:42 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2025-08-22-tanstack-query-api-factory-pattern-for-less-boilerplate/</guid>
      <description>TanStack Query의 반복적인 API 훅 작성에 지치셨나요? 팩토리 패턴을 활용해 CRUD 훅을 자동으로 생성하고, 보일러플레이트를 획기적으로 줄여 유지보수성을 높이는 실전 방법을 소개합니다.</description>
    </item>
    <item>
      <title>로컬 스토리지로 리덕스(Redux)를 대체하면 벌어지는 일</title>
      <link>https://mycodingshub.github.io/blog/2025-08-22-local-storage-vs-context-redux-zustand/</link>
      <pubDate>Sat, 23 Aug 2025 09:41:35 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2025-08-22-local-storage-vs-context-redux-zustand/</guid>
      <description>리액트 상태 관리를 위해 Redux나 Zustand 대신 브라우저의 로컬 스토리지를 사용하면 안 될까요? 이 질문에 대한 답을 찾다 보면 리액트의 렌더링 원리와 상태 관리의 본질을 깊이 이해하게 될 겁니다.</description>
    </item>
    <item>
      <title>리액트 컴파일러, &#39;그냥&#39; 켜기만 하면 정말 빨라질까?</title>
      <link>https://mycodingshub.github.io/blog/2025-08-20-react-compiler-real-world-review-is-it-magic/</link>
      <pubDate>Fri, 22 Aug 2025 14:06:06 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2025-08-20-react-compiler-real-world-review-is-it-magic/</guid>
      <description>리액트 컴파일러를 실제 프로젝트에 적용해 본 후기입니다. 간단한 예제에서는 완벽했지만, 실제 코드에서는 예상치 못한 문제들이 있었습니다. 컴파일러를 100% 활용하기 위해 우리가 알아야 할 것들을 살펴봅니다.</description>
    </item>
    <item>
      <title>NDC Oslo 2025 - 리믹스가 리액트 라우터가 됐다고요? V7으로 격변한 리액트 라우터 완전 정복</title>
      <link>https://mycodingshub.github.io/blog/2025-08-19-react-router-v-7-deep-dive-from-remix/</link>
      <pubDate>Thu, 21 Aug 2025 14:03:19 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2025-08-19-react-router-v-7-deep-dive-from-remix/</guid>
      <description>리믹스의 혁신적인 기능들이 리액트 라우터 V7으로 통합되었습니다. 선언형 모드부터 프레임워크 모드까지, 완전히 새로워진 리액트 라우터의 아키텍처와 활용법을 코드 예제와 함께 깊이 있게 파헤쳐 봅니다.</description>
    </item>
    <item>
      <title>React Router v7 완벽 가이드 기본부터 고급 활용까지</title>
      <link>https://mycodingshub.github.io/blog/2025-07-19-react-router-v-7-complete-guide/</link>
      <pubDate>Sat, 19 Jul 2025 09:56:05 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2025-07-19-react-router-v-7-complete-guide/</guid>
      <description>React Router v7의 기본 라우팅부터 동적 라우트, 인증, 코드 분할까지 모든 것을 다루는 종합 튜토리얼입니다. 실용적인 예제와 함께 실무 역량을 키워보세요.</description>
    </item>
    <item>
      <title>리액트 useState는 어떻게 작동할까 훅의 비밀 파헤치기</title>
      <link>https://mycodingshub.github.io/blog/2025-07-15-how-react-usestate-works-under-the-hood/</link>
      <pubDate>Sun, 13 Jul 2025 03:55:01 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2025-07-15-how-react-usestate-works-under-the-hood/</guid>
      <description>리액트 개발자라면 매일 사용하는 useState, 그 내부 작동 원리를 알고 계신가요? useState를 직접 만들어보며 클로저의 원리와 훅의 규칙이 왜 필요한지 그 근본적인 이유를 심층적으로 알아봅니다.</description>
    </item>
    <item>
      <title>리액트 성능 최적화의 비밀 무기 - useRef보다 강력한 Ref 콜백 사용법</title>
      <link>https://mycodingshub.github.io/blog/2025-07-10-react-performance-secret-weapon-mastering-ref-callbacks/</link>
      <pubDate>Wed, 09 Jul 2025 13:02:54 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2025-07-10-react-performance-secret-weapon-mastering-ref-callbacks/</guid>
      <description>리액트에서 불필요한 렌더링을 피하고 직접 DOM을 제어하여 성능을 극대화하는 Ref 콜백의 원리와 사용법을 알아봅니다.</description>
    </item>
    <item>
      <title>거대 기업 Shopify의 선택 - 15년 된 리액트(React) 앱을 왜 리믹스(Remix)로 바꿀까?</title>
      <link>https://mycodingshub.github.io/blog/2025-07-09-why-shopify-is-remixing-its-admin-with-the-remix-framework/</link>
      <pubDate>Wed, 09 Jul 2025 12:31:47 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2025-07-09-why-shopify-is-remixing-its-admin-with-the-remix-framework/</guid>
      <description>글로벌 이커머스 공룡 쇼피파이가 왜 15년 된 리액트 SPA를 버리고 리믹스(Remix)를 선택했는지, 그 기술적 배경과 철학을 깊이 있게 알아봅니다.</description>
    </item>
  </channel>
</rss>
