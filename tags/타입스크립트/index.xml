<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>타입스크립트 on Home</title>
    <link>https://mycodingshub.github.io/tags/%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/</link>
    <description>Recent content in 타입스크립트 on Home</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>Copyright (c) All Right Reserved.</copyright>
    <lastBuildDate>Sun, 31 Aug 2025 05:12:09 +0000</lastBuildDate>
    <atom:link href="https://mycodingshub.github.io/tags/%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>타입스크립트로 Excel 수식 엔진 직접 만들기 (ANTLR, 스택 VM)</title>
      <link>https://mycodingshub.github.io/blog/2025-08-27-building-excel-formula-engine-with-typescript-from-scratch/</link>
      <pubDate>Sun, 31 Aug 2025 05:12:09 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2025-08-27-building-excel-formula-engine-with-typescript-from-scratch/</guid>
      <description>수천 개의 의존성을 가진 복잡한 Excel 수식이 느려지는 문제를 해결하기 위해, 타입스크립트를 이용해 파싱부터 실행까지 직접 수식 엔진을 만들어 본 경험을 공유합니다. ANTLR, 역폴란드 표기법(RPN), 스택 VM의 원리를 파헤쳐 봅니다.</description>
    </item>
    <item>
      <title>TypeScript 배열, `T[]` 대신 `ReadonlyArray&lt;T&gt;`를 써야 하는 이유</title>
      <link>https://mycodingshub.github.io/blog/2025-08-16-typescript-readonly-array-for-safer-code/</link>
      <pubDate>Sun, 17 Aug 2025 05:37:21 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2025-08-16-typescript-readonly-array-for-safer-code/</guid>
      <description>함수 하나 호출했을 뿐인데 원본 배열이 망가진 경험, 있으신가요? 이런 사이드 이펙트 버그를 원천 차단하는 TypeScript의 강력한 무기, &lt;code&gt;ReadonlyArray&amp;lt;T&amp;gt;&lt;/code&gt;의 모든 것을 알려드립니다. 이제 불변성은 선택이 아닌 필수입니다.</description>
    </item>
    <item>
      <title>TypeScript enum, 아직도 쓰고 계신가요?</title>
      <link>https://mycodingshub.github.io/blog/2025-08-16-typescript-enum-alternatives-deep-dive/</link>
      <pubDate>Sun, 17 Aug 2025 05:32:23 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2025-08-16-typescript-enum-alternatives-deep-dive/</guid>
      <description>TypeScript 개발자라면 누구나 한번쯤 써봤을 enum. 하지만 왜 많은 전문가들이 enum 사용을 망설이는 걸까요? enum의 숨겨진 문제점부터 가장 확실한 대안인 Object as const 패턴까지, 이제는 알아야 할 모든 것을 알려드립니다.</description>
    </item>
    <item>
      <title>Golang, Gin, GORM 실전 API 개발 4편 - 최첨단 Full-Stack 완성편 Vite, TanStack, Zustand, shadcn/ui</title>
      <link>https://mycodingshub.github.io/blog/2025-07-25-golang-gorm-gin-tutorial-4-fullstack-react-frontend-ui-app/</link>
      <pubDate>Sat, 26 Jul 2025 13:11:57 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2025-07-25-golang-gorm-gin-tutorial-4-fullstack-react-frontend-ui-app/</guid>
      <description>React 개발의 최신 트렌드를 모두 담아 프론트엔드를 재구축합니다. Vite의 빠른 개발 환경, TanStack의 강력한 라우팅 및 데이터 관리, Zustand의 간결한 상태 관리, shadcn/ui의 미려한 UI를 통해 프로덕션급 풀스택 애플리케이션을 완성합니다.</description>
    </item>
    <item>
      <title>TypeScript &#39;satisfies&#39; 완벽 가이드 - &#39;as&#39; 대신 써야 하는 이유</title>
      <link>https://mycodingshub.github.io/blog/2025-07-14-typescript-satisfies-keyword-guide/</link>
      <pubDate>Sat, 12 Jul 2025 10:41:51 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2025-07-14-typescript-satisfies-keyword-guide/</guid>
      <description>TypeScript의 숨겨진 보석, &amp;lsquo;satisfies&amp;rsquo; 키워드를 아시나요? 타입 추론은 유지하면서 타입 검사는 강화하는 satisfies의 마법을 통해, 왜 &amp;lsquo;as&amp;rsquo;보다 더 안전하고 현명한 선택인지 알아봅니다.</description>
    </item>
    <item>
      <title>이제 never 대신 satisfies - 더 간결한 TypeScript 완전성 검사 방법</title>
      <link>https://mycodingshub.github.io/blog/2025-04-27-typescript-exhaustiveness-check-with-satisfies-operator/</link>
      <pubDate>Sun, 27 Apr 2025 11:43:16 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2025-04-27-typescript-exhaustiveness-check-with-satisfies-operator/</guid>
      <description>TypeScript에서 완전성 검사를 수행하는 전통적인 방법과, TypeScript 4.9 버전부터 도입된 &lt;code&gt;satisfies&lt;/code&gt; 연산자를 활용하여 이를 더욱 간결하고 효과적으로 개선하는 방법을 알아보겠습니다.</description>
    </item>
    <item>
      <title>TypeScript 타입 기초 완전 정복! 3편 - as const, unknown, Mapped, Conditional 타입 완벽 분석</title>
      <link>https://mycodingshub.github.io/blog/2024-10-21-typescript-type-master-third/</link>
      <pubDate>Mon, 21 Oct 2024 12:31:26 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2024-10-21-typescript-type-master-third/</guid>
      <description>TypeScript 타입 시스템의 최고봉을 향해! &lt;code&gt;as const&lt;/code&gt;, &lt;code&gt;unknown&lt;/code&gt;, &lt;code&gt;keyof&lt;/code&gt;, Lookup, Mapped, Conditional 타입 등 고급 타입 개념을 파헤쳐 봅니다.</description>
    </item>
    <item>
      <title>TypeScript 타입 기초 완전 정복! 2편 - 제네릭, 튜플, 유니언, never, 교차 타입</title>
      <link>https://mycodingshub.github.io/blog/2024-10-21-typescript-type-advanced-second/</link>
      <pubDate>Mon, 21 Oct 2024 12:20:18 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2024-10-21-typescript-type-advanced-second/</guid>
      <description>TypeScript 타입을 자유자재로 활용하는 방법을 배우는 2편! 제네릭, 튜플, 유니온, never, 교차 타입 등 강력한 타입 표현 기법을 알려드립니다.</description>
    </item>
    <item>
      <title>TypeScript 타입 기초 완전 정복! 1편 - 프리미티브, 객체, 함수, 배열</title>
      <link>https://mycodingshub.github.io/blog/2024-10-21-typescript-type-basics-first/</link>
      <pubDate>Mon, 21 Oct 2024 11:53:56 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2024-10-21-typescript-type-basics-first/</guid>
      <description>TypeScript 타입 시스템의 기본기를 다지는 1편! 프리미티브 타입부터 객체, 함수, 배열까지, TypeScript 타입 시스템의 핵심 개념을 쉽고 명확하게 설명합니다.</description>
    </item>
  </channel>
</rss>
