<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TypeScript on Home</title>
    <link>https://mycodingshub.github.io/tags/typescript/</link>
    <description>Recent content in TypeScript on Home</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>Copyright (c) All Right Reserved.</copyright>
    <lastBuildDate>Wed, 27 Aug 2025 14:22:09 +0000</lastBuildDate>
    <atom:link href="https://mycodingshub.github.io/tags/typescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>React Props 타입, 아직도 className?; string 쓰세요? (ComponentProps 완벽 가이드)</title>
      <link>https://mycodingshub.github.io/blog/2025-08-26-react-componentprops-typescript-guide/</link>
      <pubDate>Wed, 27 Aug 2025 14:22:09 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2025-08-26-react-componentprops-typescript-guide/</guid>
      <description>매번 className, onClick을 수동으로 추가하는 데 지치셨나요? HTMLAttributes부터 ComponentProps까지, 타입스크립트로 React 컴포넌트의 props를 정의하는 가장 우아하고 확장 가능한 방법을 소개합니다.</description>
    </item>
    <item>
      <title>Zustand, 리액트 없이도 이렇게 강력하다고? (테스트 가능한 텔레그램 봇 만들기)</title>
      <link>https://mycodingshub.github.io/blog/2025-08-22-building-testable-telegram-bots-with-zustand-vanilla/</link>
      <pubDate>Sat, 23 Aug 2025 10:55:06 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2025-08-22-building-testable-telegram-bots-with-zustand-vanilla/</guid>
      <description>Zustand의 바닐라 스토어를 활용해 React 없이도 완벽하게 테스트 가능한 텔레그램 봇을 만드는 방법을 소개합니다. 단방향 데이터 흐름과 반응형 상태 구독을 통해 복잡한 봇 로직을 우아하게 관리하는 비법을 확인하세요.</description>
    </item>
    <item>
      <title>TanStack Query, 아직도 로딩 스피너 쓰세요? (타입스크립트와 프리페칭으로 만드는 즉각적인 UX)</title>
      <link>https://mycodingshub.github.io/blog/2025-08-22-tanstack-query-advanced-patterns-typescript-and-prefetching/</link>
      <pubDate>Sat, 23 Aug 2025 09:52:55 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2025-08-22-tanstack-query-advanced-patterns-typescript-and-prefetching/</guid>
      <description>TanStack Query를 타입스크립트로 안전하게 만들고, 프리페칭으로 로딩 스피너를 없애는 고급 패턴을 알아봅니다. 제네릭 훅부터 on hover 프리페칭까지, 사용자 경험을 극적으로 향상시키는 실전 팁을 확인하세요.</description>
    </item>
    <item>
      <title>React Query select 옵션, 이걸로 렌더링 최적화 끝판왕 되기</title>
      <link>https://mycodingshub.github.io/blog/2025-08-20-react-query-select-option-mastering-rendering-optimization/</link>
      <pubDate>Fri, 22 Aug 2025 14:11:45 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2025-08-20-react-query-select-option-mastering-rendering-optimization/</guid>
      <description>React Query의 select 옵션을 활용해 불필요한 리렌더링을 막는 방법을 알아봅니다. 기본적인 사용법부터 TypeScript 타입 추론, useCallback을 사용한 성능 최적화, 그리고 fast-memoize를 활용한 최종 보스급 최적화까지, select의 모든 것을 파헤쳐 봅니다.</description>
    </item>
    <item>
      <title>TypeScript의 `string.length`는 왜 거짓말을 할까</title>
      <link>https://mycodingshub.github.io/blog/2025-08-16-typescript-string-length-is-lying/</link>
      <pubDate>Sun, 17 Aug 2025 06:21:38 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2025-08-16-typescript-string-length-is-lying/</guid>
      <description>자바스크립트의 &lt;code&gt;string.length&lt;/code&gt;가 이모지와 복잡한 문자 앞에서 어떻게 우리를 배신하는지, 그리고 이 혼돈을 해결할 현대적인 API, &lt;code&gt;Intl.Segmenter&lt;/code&gt;의 모든 것을 파헤쳐 봅니다.</description>
    </item>
    <item>
      <title>TypeScript 배열, `T[]` 대신 `ReadonlyArray&lt;T&gt;`를 써야 하는 이유</title>
      <link>https://mycodingshub.github.io/blog/2025-08-16-typescript-readonly-array-for-safer-code/</link>
      <pubDate>Sun, 17 Aug 2025 05:37:21 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2025-08-16-typescript-readonly-array-for-safer-code/</guid>
      <description>함수 하나 호출했을 뿐인데 원본 배열이 망가진 경험, 있으신가요? 이런 사이드 이펙트 버그를 원천 차단하는 TypeScript의 강력한 무기, &lt;code&gt;ReadonlyArray&amp;lt;T&amp;gt;&lt;/code&gt;의 모든 것을 알려드립니다. 이제 불변성은 선택이 아닌 필수입니다.</description>
    </item>
    <item>
      <title>TypeScript enum, 아직도 쓰고 계신가요?</title>
      <link>https://mycodingshub.github.io/blog/2025-08-16-typescript-enum-alternatives-deep-dive/</link>
      <pubDate>Sun, 17 Aug 2025 05:32:23 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2025-08-16-typescript-enum-alternatives-deep-dive/</guid>
      <description>TypeScript 개발자라면 누구나 한번쯤 써봤을 enum. 하지만 왜 많은 전문가들이 enum 사용을 망설이는 걸까요? enum의 숨겨진 문제점부터 가장 확실한 대안인 Object as const 패턴까지, 이제는 알아야 할 모든 것을 알려드립니다.</description>
    </item>
    <item>
      <title>TypeScript &#39;satisfies&#39; 완벽 가이드 - &#39;as&#39; 대신 써야 하는 이유</title>
      <link>https://mycodingshub.github.io/blog/2025-07-14-typescript-satisfies-keyword-guide/</link>
      <pubDate>Sat, 12 Jul 2025 10:41:51 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2025-07-14-typescript-satisfies-keyword-guide/</guid>
      <description>TypeScript의 숨겨진 보석, &amp;lsquo;satisfies&amp;rsquo; 키워드를 아시나요? 타입 추론은 유지하면서 타입 검사는 강화하는 satisfies의 마법을 통해, 왜 &amp;lsquo;as&amp;rsquo;보다 더 안전하고 현명한 선택인지 알아봅니다.</description>
    </item>
    <item>
      <title>실전 가이드 - React &#43; Vite로 만드는 전문가용 다중 파일 업로더</title>
      <link>https://mycodingshub.github.io/blog/2025-07-12-react-vite-pro-file-uploader-source-code-analysis/</link>
      <pubDate>Sat, 12 Jul 2025 09:27:49 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2025-07-12-react-vite-pro-file-uploader-source-code-analysis/</guid>
      <description>React 컴포넌트 설계부터 병렬 업로드 로직까지 다중 파일 업로더를 단계별로 구축하고 그 구조를 심층 분석합니다.</description>
    </item>
    <item>
      <title>이제 never 대신 satisfies - 더 간결한 TypeScript 완전성 검사 방법</title>
      <link>https://mycodingshub.github.io/blog/2025-04-27-typescript-exhaustiveness-check-with-satisfies-operator/</link>
      <pubDate>Sun, 27 Apr 2025 11:43:16 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2025-04-27-typescript-exhaustiveness-check-with-satisfies-operator/</guid>
      <description>TypeScript에서 완전성 검사를 수행하는 전통적인 방법과, TypeScript 4.9 버전부터 도입된 &lt;code&gt;satisfies&lt;/code&gt; 연산자를 활용하여 이를 더욱 간결하고 효과적으로 개선하는 방법을 알아보겠습니다.</description>
    </item>
  </channel>
</rss>
