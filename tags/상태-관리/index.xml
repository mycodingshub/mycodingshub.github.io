<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>상태 관리 on Home</title>
    <link>https://mycodingshub.github.io/tags/%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC/</link>
    <description>Recent content in 상태 관리 on Home</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>Copyright (c) All Right Reserved.</copyright>
    <lastBuildDate>Sun, 07 Sep 2025 05:12:44 +0000</lastBuildDate>
    <atom:link href="https://mycodingshub.github.io/tags/%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TanStack DB 완벽 가이드 상태 관리의 새로운 패러다임</title>
      <link>https://mycodingshub.github.io/blog/2025-09-05-tanstack-db-the-future-of-state-management/</link>
      <pubDate>Sun, 07 Sep 2025 05:12:44 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2025-09-05-tanstack-db-the-future-of-state-management/</guid>
      <description>TanStack DB는 프론트엔드에 데이터베이스를 가져와 상태 관리와 데이터 동기화를 통합하는 새로운 라이브러리입니다. 자동 낙관적 업데이트와 유연한 백엔드 연동을 통해 개발 경험을 혁신하는 방법을 알아봅니다.</description>
    </item>
    <item>
      <title>Zustand, 리액트 없이도 이렇게 강력하다고? (테스트 가능한 텔레그램 봇 만들기)</title>
      <link>https://mycodingshub.github.io/blog/2025-08-22-building-testable-telegram-bots-with-zustand-vanilla/</link>
      <pubDate>Sat, 23 Aug 2025 10:55:06 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2025-08-22-building-testable-telegram-bots-with-zustand-vanilla/</guid>
      <description>Zustand의 바닐라 스토어를 활용해 React 없이도 완벽하게 테스트 가능한 텔레그램 봇을 만드는 방법을 소개합니다. 단방향 데이터 흐름과 반응형 상태 구독을 통해 복잡한 봇 로직을 우아하게 관리하는 비법을 확인하세요.</description>
    </item>
    <item>
      <title>Context API의 리렌더링 지옥, Zustand가 구원해드립니다</title>
      <link>https://mycodingshub.github.io/blog/2025-08-22-zustand-vs-context-api-rerender-optimization/</link>
      <pubDate>Sat, 23 Aug 2025 10:17:02 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2025-08-22-zustand-vs-context-api-rerender-optimization/</guid>
      <description>리액트의 Context API를 사용하다 불필요한 리렌더링 문제로 골머리를 앓고 계신가요? Zustand가 어떻게 셀렉터 하나만으로 이 문제를 우아하게 해결하고, 코드까지 간결하게 만들어주는지 그 비법을 공개합니다.</description>
    </item>
    <item>
      <title>로컬 스토리지로 리덕스(Redux)를 대체하면 벌어지는 일</title>
      <link>https://mycodingshub.github.io/blog/2025-08-22-local-storage-vs-context-redux-zustand/</link>
      <pubDate>Sat, 23 Aug 2025 09:41:35 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2025-08-22-local-storage-vs-context-redux-zustand/</guid>
      <description>리액트 상태 관리를 위해 Redux나 Zustand 대신 브라우저의 로컬 스토리지를 사용하면 안 될까요? 이 질문에 대한 답을 찾다 보면 리액트의 렌더링 원리와 상태 관리의 본질을 깊이 이해하게 될 겁니다.</description>
    </item>
    <item>
      <title>다중 Async Local Storage - React Context처럼 중첩하기</title>
      <link>https://mycodingshub.github.io/blog/2025-07-13-nesting-multiple-async-local-storage/</link>
      <pubDate>Sat, 12 Jul 2025 10:35:52 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2025-07-13-nesting-multiple-async-local-storage/</guid>
      <description>단일 컨텍스트를 넘어, 여러 개의 Async Local Storage를 중첩하여 사용하는 방법을 알아봅니다. 재귀 함수를 이용한 영리한 트릭으로, 서버 사이드 코드의 모듈성을 극대화하고 prop drilling을 완벽하게 해결해 보세요.</description>
    </item>
    <item>
      <title>Next.js 라우트 핸들러의 Prop Drilling, &#39;Node.js의 React Context&#39;로 해결하기</title>
      <link>https://mycodingshub.github.io/blog/2025-07-13-solving-prop-drilling-in-nextjs-with-async-local-storage/</link>
      <pubDate>Sat, 12 Jul 2025 10:32:04 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2025-07-13-solving-prop-drilling-in-nextjs-with-async-local-storage/</guid>
      <description>서버 사이드 함수에서 반복되는 매개변수 전달, 즉 &amp;lsquo;prop drilling&amp;rsquo;의 고통을 Node.js의 Async Local Storage로 해결하는 방법을 알아봅니다. React Context처럼 동작하는 이 강력한 기능을 마스터해 보세요.</description>
    </item>
  </channel>
</rss>
