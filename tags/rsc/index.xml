<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>RSC on Home</title>
    <link>https://mycodingshub.github.io/tags/rsc/</link>
    <description>Recent content in RSC on Home</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>Copyright (c) All Right Reserved.</copyright>
    <lastBuildDate>Sun, 07 Sep 2025 04:47:25 +0000</lastBuildDate>
    <atom:link href="https://mycodingshub.github.io/tags/rsc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>프레임워크 없는 React 서버 컴포넌트 라이브러리 Forket을 소개합니다</title>
      <link>https://mycodingshub.github.io/blog/2025-09-05-introducing-forket-rsc-without-framework/</link>
      <pubDate>Sun, 07 Sep 2025 04:47:25 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2025-09-05-introducing-forket-rsc-without-framework/</guid>
      <description>Next.js 없이 React 서버 컴포넌트를 사용하려는 한 해외 개발자의 도전을 소개합니다. Krasimir Tsonev가 만든 Forket이라는 도구가 어떻게 이 문제를 해결하는지 자세히 살펴보시죠.</description>
    </item>
    <item>
      <title>리액트 라우터와 서버 컴포넌트(RSC)의 첫 만남, 직접 써본 후기</title>
      <link>https://mycodingshub.github.io/blog/2025-08-29-react-server-components-react-router-first-impressions/</link>
      <pubDate>Tue, 02 Sep 2025 13:35:20 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2025-08-29-react-server-components-react-router-first-impressions/</guid>
      <description>드디어 리액트 라우터에서 리액트 서버 컴포넌트(RSC)를 실험적으로 지원하기 시작했습니다. 기존의 loader 방식과 무엇이 다른지, 왜 우리가 RSC에 주목해야 하는지, 그리고 직접 블로그를 마이그레이션하며 겪은 생생한 첫인상을 공유합니다.</description>
    </item>
    <item>
      <title>서버 컴포넌트, &#39;이렇게&#39; 쓰시면 말짱 꽝입니다 (RSC 조합의 기술)</title>
      <link>https://mycodingshub.github.io/blog/2025-08-21-react-server-client-component-composition-in-practice/</link>
      <pubDate>Sat, 23 Aug 2025 07:01:54 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2025-08-21-react-server-client-component-composition-in-practice/</guid>
      <description>React 서버 컴포넌트의 이점을 해치지 않으면서 클라이언트 컴포넌트와 효과적으로 조합하는 핵심 패턴을 알아봅니다. 서버 컴포넌트를 children으로 전달하는 간단한 방법으로 성능과 재사용성을 모두 잡아보세요.</description>
    </item>
    <item>
      <title>React Cache 그냥 쓰셨나요? (숨겨진 일관성의 비밀)</title>
      <link>https://mycodingshub.github.io/blog/2025-08-21-react-cache-the-secret-of-consistency/</link>
      <pubDate>Sat, 23 Aug 2025 06:22:43 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2025-08-21-react-cache-the-secret-of-consistency/</guid>
      <description>React의 cache 함수는 단순한 성능 최적화 도구가 아닙니다. React 서버 컴포넌트(RSC) 환경에서 데이터 일관성을 보장하는 핵심 API로서 cache의 진짜 역할을 깊이 있게 파헤칩니다.</description>
    </item>
    <item>
      <title>React 서버 컴포넌트, 어떻게 테스트할까? (공식 지원 전까지의 유일한 해답)</title>
      <link>https://mycodingshub.github.io/blog/2025-07-12-how-to-test-react-server-components/</link>
      <pubDate>Sat, 12 Jul 2025 10:11:04 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2025-07-12-how-to-test-react-server-components/</guid>
      <description>React와 Next.js 팀이 아직 제공하지 않는 서버 컴포넌트(RSC) 테스트 방법. 커뮤니티에서 발견된 &amp;lsquo;핵&amp;rsquo;이지만 확실하게 동작하는 유틸리티 함수를 통해, 비동기 서버 컴포넌트를 테스트하는 유일한 방법을 알아봅니다.</description>
    </item>
    <item>
      <title>RSC(리액트 서버 컴포넌트) 이해 2편, 번들러와 인터리빙, 그리고 성능 최적화 전략까지</title>
      <link>https://mycodingshub.github.io/blog/2025-01-20-rsc-guide-2-bundler-interleaving-optimization/</link>
      <pubDate>Mon, 20 Jan 2025 12:01:20 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2025-01-20-rsc-guide-2-bundler-interleaving-optimization/</guid>
      <description>RSC(리액트 서버 컴포넌트)에 대해 번들러와 인터리빙, 그리고 성능 최적화 전략까지 알아보겠습니다.</description>
    </item>
    <item>
      <title>RSC(리액트 서버 컴포넌트) 동작 원리부터 성능 최적화까지</title>
      <link>https://mycodingshub.github.io/blog/2025-01-20-rsc-tutorial-1-react-server-components-explained/</link>
      <pubDate>Mon, 20 Jan 2025 11:54:22 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2025-01-20-rsc-tutorial-1-react-server-components-explained/</guid>
      <description>React Server Comoponents 에 대해 심도 있게 공부해 봅시다.</description>
    </item>
    <item>
      <title>Next.js 14 강좌 10편. CSR부터 SSR, RSC까지 React의 렌더링의 역사 살펴보기</title>
      <link>https://mycodingshub.github.io/blog/2024-05-14-nextjs-14-tutorial-all-about-rendering-csr-ssr-rsc/</link>
      <pubDate>Tue, 14 May 2024 14:47:43 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2024-05-14-nextjs-14-tutorial-all-about-rendering-csr-ssr-rsc/</guid>
      <description>Next.js 렌더링 공부에 앞서 React 렌더링 역사 알아보기</description>
    </item>
    <item>
      <title>Next.js의 SSR과 React의 RSC(React Server Components) 완벽 이해</title>
      <link>https://mycodingshub.github.io/blog/2024-01-28-complete-understanding-nextjs-ssr-and-react-rsc/</link>
      <pubDate>Sun, 28 Jan 2024 08:15:33 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2024-01-28-complete-understanding-nextjs-ssr-and-react-rsc/</guid>
      <description>SSR과 RSC의 차이에 대해 심도 있게 공부해 보기</description>
    </item>
  </channel>
</rss>
