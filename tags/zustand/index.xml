<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zustand on Home</title>
    <link>https://mycodingshub.github.io/tags/zustand/</link>
    <description>Recent content in Zustand on Home</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>Copyright (c) All Right Reserved.</copyright>
    <lastBuildDate>Sat, 23 Aug 2025 10:55:06 +0000</lastBuildDate>
    <atom:link href="https://mycodingshub.github.io/tags/zustand/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Zustand, 리액트 없이도 이렇게 강력하다고? (테스트 가능한 텔레그램 봇 만들기)</title>
      <link>https://mycodingshub.github.io/blog/2025-08-22-building-testable-telegram-bots-with-zustand-vanilla/</link>
      <pubDate>Sat, 23 Aug 2025 10:55:06 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2025-08-22-building-testable-telegram-bots-with-zustand-vanilla/</guid>
      <description>Zustand의 바닐라 스토어를 활용해 React 없이도 완벽하게 테스트 가능한 텔레그램 봇을 만드는 방법을 소개합니다. 단방향 데이터 흐름과 반응형 상태 구독을 통해 복잡한 봇 로직을 우아하게 관리하는 비법을 확인하세요.</description>
    </item>
    <item>
      <title>Context API의 리렌더링 지옥, Zustand가 구원해드립니다</title>
      <link>https://mycodingshub.github.io/blog/2025-08-22-zustand-vs-context-api-rerender-optimization/</link>
      <pubDate>Sat, 23 Aug 2025 10:17:02 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2025-08-22-zustand-vs-context-api-rerender-optimization/</guid>
      <description>리액트의 Context API를 사용하다 불필요한 리렌더링 문제로 골머리를 앓고 계신가요? Zustand가 어떻게 셀렉터 하나만으로 이 문제를 우아하게 해결하고, 코드까지 간결하게 만들어주는지 그 비법을 공개합니다.</description>
    </item>
    <item>
      <title>로컬 스토리지로 리덕스(Redux)를 대체하면 벌어지는 일</title>
      <link>https://mycodingshub.github.io/blog/2025-08-22-local-storage-vs-context-redux-zustand/</link>
      <pubDate>Sat, 23 Aug 2025 09:41:35 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2025-08-22-local-storage-vs-context-redux-zustand/</guid>
      <description>리액트 상태 관리를 위해 Redux나 Zustand 대신 브라우저의 로컬 스토리지를 사용하면 안 될까요? 이 질문에 대한 답을 찾다 보면 리액트의 렌더링 원리와 상태 관리의 본질을 깊이 이해하게 될 겁니다.</description>
    </item>
    <item>
      <title>Golang, Gin, GORM 실전 API 개발 4편 - 최첨단 Full-Stack 완성편 Vite, TanStack, Zustand, shadcn/ui</title>
      <link>https://mycodingshub.github.io/blog/2025-07-25-golang-gorm-gin-tutorial-4-fullstack-react-frontend-ui-app/</link>
      <pubDate>Sat, 26 Jul 2025 13:11:57 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2025-07-25-golang-gorm-gin-tutorial-4-fullstack-react-frontend-ui-app/</guid>
      <description>React 개발의 최신 트렌드를 모두 담아 프론트엔드를 재구축합니다. Vite의 빠른 개발 환경, TanStack의 강력한 라우팅 및 데이터 관리, Zustand의 간결한 상태 관리, shadcn/ui의 미려한 UI를 통해 프로덕션급 풀스택 애플리케이션을 완성합니다.</description>
    </item>
    <item>
      <title>React Zustand 상태관리 실전 예제로 마스터하기</title>
      <link>https://mycodingshub.github.io/blog/2024-09-18-understanding-react-zustand-deep-dive/</link>
      <pubDate>Wed, 18 Sep 2024 05:47:44 +0000</pubDate>
      <guid>https://mycodingshub.github.io/blog/2024-09-18-understanding-react-zustand-deep-dive/</guid>
      <description>React 상태관리는 이제 Zustand로 마스터하십시요.</description>
    </item>
  </channel>
</rss>
